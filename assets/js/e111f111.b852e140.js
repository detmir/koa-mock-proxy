"use strict";(self.webpackChunkkoa_mock_proxy=self.webpackChunkkoa_mock_proxy||[]).push([[836],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>u});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=o.createContext({}),c=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},p=function(e){var r=c(e.components);return o.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},m=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),u=n,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||i;return t?o.createElement(k,a(a({ref:r},p),{},{components:t})):o.createElement(k,a({ref:r},p))}));function u(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6393:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=t(7462),n=(t(7294),t(3905));const i={},a="API reference",s={unversionedId:"api",id:"api",title:"API reference",description:"Middlewares",source:"@site/../docs/api.md",sourceDirName:".",slug:"/api",permalink:"/koa-mock-proxy/docs/api",draft:!1,editUrl:"https://github.com/detmir/koa-mock-proxy/tree/main/docs/../docs/api.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"UI",permalink:"/koa-mock-proxy/docs/ui"}},l={},c=[{value:"Middlewares",id:"middlewares",level:2},{value:"mockProxyMiddleware(options: MockProxyOptions)",id:"mockproxymiddlewareoptions-mockproxyoptions",level:3},{value:"mockProxyConfigMiddleware(options: MockProxyOptions)",id:"mockproxyconfigmiddlewareoptions-mockproxyoptions",level:3},{value:"scenariosMiddleware(Record&lt;ScenarioName, Middleware&gt;)",id:"scenariosmiddlewarerecordscenarioname-middleware",level:3},{value:"controlMiddleware(options: { path?: string })",id:"controlmiddlewareoptions--path-string-",level:3},{value:"Mock proxy options",id:"mock-proxy-options",level:2},{value:"mode",id:"mode",level:3},{value:"targetUrl",id:"targeturl",level:3},{value:"mocksDirectory",id:"mocksdirectory",level:3},{value:"convertProxyResponse",id:"convertproxyresponse",level:3},{value:"pathRewrite",id:"pathrewrite",level:3},{value:"recordOptions.getFilenamePostfix",id:"recordoptionsgetfilenamepostfix",level:3},{value:"recordOptions.overwrite",id:"recordoptionsoverwrite",level:3},{value:"Functions for managing mock scenarios",id:"functions-for-managing-mock-scenarios",level:2},{value:"addAvailableScenarios(scenarios: string[])",id:"addavailablescenariosscenarios-string",level:3},{value:"setActiveScenarios(scenarios: string[])",id:"setactivescenariosscenarios-string",level:3},{value:"getScenariosData(key: string) =&gt; any",id:"getscenariosdatakey-string--any",level:3},{value:"setScenariosData(key: string, value: string) =&gt; void",id:"setscenariosdatakey-string-value-string--void",level:3}],p={toc:c};function d(e){let{components:r,...t}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"api-reference"},"API reference"),(0,n.kt)("h2",{id:"middlewares"},"Middlewares"),(0,n.kt)("p",null,"All functions here return Koa middleware (",(0,n.kt)("inlineCode",{parentName:"p"},"(ctx, next) => Promise"),")"),(0,n.kt)("h3",{id:"mockproxymiddlewareoptions-mockproxyoptions"},"mockProxyMiddleware(",(0,n.kt)("a",{parentName:"h3",href:"#mock-proxy-options"},"options: MockProxyOptions"),")"),(0,n.kt)("p",null,"Main middleware, for proxy/mock incoming requests."),(0,n.kt)("p",null,"Example of usage:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"const server = new Koa();\n\nserver.use(koaMockProxy({\n targetUrl: 'http://my-service.com/api'\n}));\n")),(0,n.kt)("h3",{id:"mockproxyconfigmiddlewareoptions-mockproxyoptions"},"mockProxyConfigMiddleware(",(0,n.kt)("a",{parentName:"h3",href:"#mock-proxy-options"},"options: MockProxyOptions"),")"),(0,n.kt)("p",null,"Creates default options for next ",(0,n.kt)("inlineCode",{parentName:"p"},"mockProxyMiddleware")," middlewares."),(0,n.kt)("h3",{id:"scenariosmiddlewarerecordscenarioname-middleware"},"scenariosMiddleware(Record<ScenarioName, Middleware>)"),(0,n.kt)("p",null,"Makes ",(0,n.kt)("inlineCode",{parentName:"p"},"Middleware")," active only when scenario ",(0,n.kt)("inlineCode",{parentName:"p"},"ScenarioName")," is active."),(0,n.kt)("h3",{id:"controlmiddlewareoptions--path-string-"},"controlMiddleware(options: { path?: string })"),(0,n.kt)("p",null,"Middleware registers UI and API by given path."),(0,n.kt)("p",null,"If path is not passed, default path ",(0,n.kt)("inlineCode",{parentName:"p"},"/mockproxy")," will be applied."),(0,n.kt)("h2",{id:"mock-proxy-options"},"Mock proxy options"),(0,n.kt)("p",null,"You can pass options in ",(0,n.kt)("inlineCode",{parentName:"p"},"mockProxyMiddleware")," or ",(0,n.kt)("inlineCode",{parentName:"p"},"mockProxyConfigMiddleware"),"."),(0,n.kt)("h3",{id:"mode"},"mode"),(0,n.kt)("p",null,"Possible values: ",(0,n.kt)("inlineCode",{parentName:"p"},"record | replay | replayOrProxy | proxy")),(0,n.kt)("p",null,"For more details look ","[description of working modes]","(../README.md#Working modes)"),(0,n.kt)("h3",{id:"targeturl"},"targetUrl"),(0,n.kt)("p",null,"Type: ",(0,n.kt)("inlineCode",{parentName:"p"},"string")),(0,n.kt)("p",null,"An absolute base url where a mock server proxies request."),(0,n.kt)("p",null,'Required for all modes except "replay"'),(0,n.kt)("h3",{id:"mocksdirectory"},"mocksDirectory"),(0,n.kt)("p",null,"Type: ",(0,n.kt)("inlineCode",{parentName:"p"},"string")),(0,n.kt)("p",null,'A base directory for all mocks.\nRequired for all modes except "proxy"'),(0,n.kt)("h3",{id:"convertproxyresponse"},"convertProxyResponse"),(0,n.kt)("p",null,"Type: ",(0,n.kt)("inlineCode",{parentName:"p"},"(body: Buffer, ctx: Context) => Buffer")),(0,n.kt)("h3",{id:"pathrewrite"},"pathRewrite"),(0,n.kt)("p",null,"Type: ",(0,n.kt)("inlineCode",{parentName:"p"},"Record<string, string>")),(0,n.kt)("p",null,"Rewrite target's url path. Object-keys will be used as RegExp to match paths.\n(from more examples look to ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/chimurai/http-proxy-middleware#pathrewrite-objectfunction"},"http-proxy-middleware docs"),")"),(0,n.kt)("h3",{id:"recordoptionsgetfilenamepostfix"},"recordOptions.getFilenamePostfix"),(0,n.kt)("p",null,"Type: ",(0,n.kt)("inlineCode",{parentName:"p"},"(ctx: Context) => string")),(0,n.kt)("p",null,"A postfix for filename depending on working mode.\nYou can use different postfixes depending on a scenario or an incoming request (request body, headers, etc)"),(0,n.kt)("h3",{id:"recordoptionsoverwrite"},"recordOptions.overwrite"),(0,n.kt)("p",null,'Determines whether is mock server can overwrite file in record mode.\nYou can also redefine this value is mock file by adding file "overwrite"'),(0,n.kt)("h2",{id:"functions-for-managing-mock-scenarios"},"Functions for managing mock scenarios"),(0,n.kt)("h3",{id:"addavailablescenariosscenarios-string"},"addAvailableScenarios(scenarios: string[])"),(0,n.kt)("p",null,"Adds selected scenarios to the available scenarios list."),(0,n.kt)("h3",{id:"setactivescenariosscenarios-string"},"setActiveScenarios(scenarios: string[])"),(0,n.kt)("p",null,"Makes selected scenarios active."),(0,n.kt)("h3",{id:"getscenariosdatakey-string--any"},"getScenariosData(key: string) => any"),(0,n.kt)("p",null,"Returns data for current scenario session."),(0,n.kt)("h3",{id:"setscenariosdatakey-string-value-string--void"},"setScenariosData(key: string, value: string) => void"),(0,n.kt)("p",null,"Sets data for storing in the current scenario session."))}d.isMDXComponent=!0}}]);